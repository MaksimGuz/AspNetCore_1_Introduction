/* 
 * Mentoring API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// EmployeeTerritories
    /// </summary>
    [DataContract]
    public partial class EmployeeTerritories :  IEquatable<EmployeeTerritories>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmployeeTerritories" /> class.
        /// </summary>
        /// <param name="EmployeeId">EmployeeId.</param>
        /// <param name="TerritoryId">TerritoryId.</param>
        /// <param name="Employee">Employee.</param>
        /// <param name="Territory">Territory.</param>
        public EmployeeTerritories(int? EmployeeId = null, string TerritoryId = null, Employees Employee = null, Territories Territory = null)
        {
            this.EmployeeId = EmployeeId;
            this.TerritoryId = TerritoryId;
            this.Employee = Employee;
            this.Territory = Territory;
        }
        
        /// <summary>
        /// Gets or Sets EmployeeId
        /// </summary>
        [DataMember(Name="employeeId", EmitDefaultValue=false)]
        public int? EmployeeId { get; set; }
        /// <summary>
        /// Gets or Sets TerritoryId
        /// </summary>
        [DataMember(Name="territoryId", EmitDefaultValue=false)]
        public string TerritoryId { get; set; }
        /// <summary>
        /// Gets or Sets Employee
        /// </summary>
        [DataMember(Name="employee", EmitDefaultValue=false)]
        public Employees Employee { get; set; }
        /// <summary>
        /// Gets or Sets Territory
        /// </summary>
        [DataMember(Name="territory", EmitDefaultValue=false)]
        public Territories Territory { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmployeeTerritories {\n");
            sb.Append("  EmployeeId: ").Append(EmployeeId).Append("\n");
            sb.Append("  TerritoryId: ").Append(TerritoryId).Append("\n");
            sb.Append("  Employee: ").Append(Employee).Append("\n");
            sb.Append("  Territory: ").Append(Territory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EmployeeTerritories);
        }

        /// <summary>
        /// Returns true if EmployeeTerritories instances are equal
        /// </summary>
        /// <param name="other">Instance of EmployeeTerritories to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmployeeTerritories other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.EmployeeId == other.EmployeeId ||
                    this.EmployeeId != null &&
                    this.EmployeeId.Equals(other.EmployeeId)
                ) && 
                (
                    this.TerritoryId == other.TerritoryId ||
                    this.TerritoryId != null &&
                    this.TerritoryId.Equals(other.TerritoryId)
                ) && 
                (
                    this.Employee == other.Employee ||
                    this.Employee != null &&
                    this.Employee.Equals(other.Employee)
                ) && 
                (
                    this.Territory == other.Territory ||
                    this.Territory != null &&
                    this.Territory.Equals(other.Territory)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.EmployeeId != null)
                    hash = hash * 59 + this.EmployeeId.GetHashCode();
                if (this.TerritoryId != null)
                    hash = hash * 59 + this.TerritoryId.GetHashCode();
                if (this.Employee != null)
                    hash = hash * 59 + this.Employee.GetHashCode();
                if (this.Territory != null)
                    hash = hash * 59 + this.Territory.GetHashCode();
                return hash;
            }
        }
    }

}
