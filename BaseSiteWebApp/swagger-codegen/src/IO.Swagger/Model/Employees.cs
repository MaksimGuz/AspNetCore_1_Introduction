/* 
 * Mentoring API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Employees
    /// </summary>
    [DataContract]
    public partial class Employees :  IEquatable<Employees>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Employees" /> class.
        /// </summary>
        /// <param name="EmployeeId">EmployeeId.</param>
        /// <param name="LastName">LastName.</param>
        /// <param name="FirstName">FirstName.</param>
        /// <param name="Title">Title.</param>
        /// <param name="TitleOfCourtesy">TitleOfCourtesy.</param>
        /// <param name="BirthDate">BirthDate.</param>
        /// <param name="HireDate">HireDate.</param>
        /// <param name="Address">Address.</param>
        /// <param name="City">City.</param>
        /// <param name="Region">Region.</param>
        /// <param name="PostalCode">PostalCode.</param>
        /// <param name="Country">Country.</param>
        /// <param name="HomePhone">HomePhone.</param>
        /// <param name="Extension">Extension.</param>
        /// <param name="Photo">Photo.</param>
        /// <param name="Notes">Notes.</param>
        /// <param name="ReportsTo">ReportsTo.</param>
        /// <param name="PhotoPath">PhotoPath.</param>
        /// <param name="ReportsToNavigation">ReportsToNavigation.</param>
        /// <param name="EmployeeTerritories">EmployeeTerritories.</param>
        /// <param name="InverseReportsToNavigation">InverseReportsToNavigation.</param>
        /// <param name="Orders">Orders.</param>
        public Employees(int? EmployeeId = null, string LastName = null, string FirstName = null, string Title = null, string TitleOfCourtesy = null, DateTime? BirthDate = null, DateTime? HireDate = null, string Address = null, string City = null, string Region = null, string PostalCode = null, string Country = null, string HomePhone = null, string Extension = null, byte[] Photo = null, string Notes = null, int? ReportsTo = null, string PhotoPath = null, Employees ReportsToNavigation = null, List<EmployeeTerritories> EmployeeTerritories = null, List<Employees> InverseReportsToNavigation = null, List<Orders> Orders = null)
        {
            this.EmployeeId = EmployeeId;
            this.LastName = LastName;
            this.FirstName = FirstName;
            this.Title = Title;
            this.TitleOfCourtesy = TitleOfCourtesy;
            this.BirthDate = BirthDate;
            this.HireDate = HireDate;
            this.Address = Address;
            this.City = City;
            this.Region = Region;
            this.PostalCode = PostalCode;
            this.Country = Country;
            this.HomePhone = HomePhone;
            this.Extension = Extension;
            this.Photo = Photo;
            this.Notes = Notes;
            this.ReportsTo = ReportsTo;
            this.PhotoPath = PhotoPath;
            this.ReportsToNavigation = ReportsToNavigation;
            this.EmployeeTerritories = EmployeeTerritories;
            this.InverseReportsToNavigation = InverseReportsToNavigation;
            this.Orders = Orders;
        }
        
        /// <summary>
        /// Gets or Sets EmployeeId
        /// </summary>
        [DataMember(Name="employeeId", EmitDefaultValue=false)]
        public int? EmployeeId { get; set; }
        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }
        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }
        /// <summary>
        /// Gets or Sets TitleOfCourtesy
        /// </summary>
        [DataMember(Name="titleOfCourtesy", EmitDefaultValue=false)]
        public string TitleOfCourtesy { get; set; }
        /// <summary>
        /// Gets or Sets BirthDate
        /// </summary>
        [DataMember(Name="birthDate", EmitDefaultValue=false)]
        public DateTime? BirthDate { get; set; }
        /// <summary>
        /// Gets or Sets HireDate
        /// </summary>
        [DataMember(Name="hireDate", EmitDefaultValue=false)]
        public DateTime? HireDate { get; set; }
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }
        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }
        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public string Region { get; set; }
        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }
        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// Gets or Sets HomePhone
        /// </summary>
        [DataMember(Name="homePhone", EmitDefaultValue=false)]
        public string HomePhone { get; set; }
        /// <summary>
        /// Gets or Sets Extension
        /// </summary>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public string Extension { get; set; }
        /// <summary>
        /// Gets or Sets Photo
        /// </summary>
        [DataMember(Name="photo", EmitDefaultValue=false)]
        public byte[] Photo { get; set; }
        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }
        /// <summary>
        /// Gets or Sets ReportsTo
        /// </summary>
        [DataMember(Name="reportsTo", EmitDefaultValue=false)]
        public int? ReportsTo { get; set; }
        /// <summary>
        /// Gets or Sets PhotoPath
        /// </summary>
        [DataMember(Name="photoPath", EmitDefaultValue=false)]
        public string PhotoPath { get; set; }
        /// <summary>
        /// Gets or Sets ReportsToNavigation
        /// </summary>
        [DataMember(Name="reportsToNavigation", EmitDefaultValue=false)]
        public Employees ReportsToNavigation { get; set; }
        /// <summary>
        /// Gets or Sets EmployeeTerritories
        /// </summary>
        [DataMember(Name="employeeTerritories", EmitDefaultValue=false)]
        public List<EmployeeTerritories> EmployeeTerritories { get; set; }
        /// <summary>
        /// Gets or Sets InverseReportsToNavigation
        /// </summary>
        [DataMember(Name="inverseReportsToNavigation", EmitDefaultValue=false)]
        public List<Employees> InverseReportsToNavigation { get; set; }
        /// <summary>
        /// Gets or Sets Orders
        /// </summary>
        [DataMember(Name="orders", EmitDefaultValue=false)]
        public List<Orders> Orders { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Employees {\n");
            sb.Append("  EmployeeId: ").Append(EmployeeId).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  TitleOfCourtesy: ").Append(TitleOfCourtesy).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  HireDate: ").Append(HireDate).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  HomePhone: ").Append(HomePhone).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  Photo: ").Append(Photo).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  ReportsTo: ").Append(ReportsTo).Append("\n");
            sb.Append("  PhotoPath: ").Append(PhotoPath).Append("\n");
            sb.Append("  ReportsToNavigation: ").Append(ReportsToNavigation).Append("\n");
            sb.Append("  EmployeeTerritories: ").Append(EmployeeTerritories).Append("\n");
            sb.Append("  InverseReportsToNavigation: ").Append(InverseReportsToNavigation).Append("\n");
            sb.Append("  Orders: ").Append(Orders).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Employees);
        }

        /// <summary>
        /// Returns true if Employees instances are equal
        /// </summary>
        /// <param name="other">Instance of Employees to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Employees other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.EmployeeId == other.EmployeeId ||
                    this.EmployeeId != null &&
                    this.EmployeeId.Equals(other.EmployeeId)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.TitleOfCourtesy == other.TitleOfCourtesy ||
                    this.TitleOfCourtesy != null &&
                    this.TitleOfCourtesy.Equals(other.TitleOfCourtesy)
                ) && 
                (
                    this.BirthDate == other.BirthDate ||
                    this.BirthDate != null &&
                    this.BirthDate.Equals(other.BirthDate)
                ) && 
                (
                    this.HireDate == other.HireDate ||
                    this.HireDate != null &&
                    this.HireDate.Equals(other.HireDate)
                ) && 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.Region == other.Region ||
                    this.Region != null &&
                    this.Region.Equals(other.Region)
                ) && 
                (
                    this.PostalCode == other.PostalCode ||
                    this.PostalCode != null &&
                    this.PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.HomePhone == other.HomePhone ||
                    this.HomePhone != null &&
                    this.HomePhone.Equals(other.HomePhone)
                ) && 
                (
                    this.Extension == other.Extension ||
                    this.Extension != null &&
                    this.Extension.Equals(other.Extension)
                ) && 
                (
                    this.Photo == other.Photo ||
                    this.Photo != null &&
                    this.Photo.Equals(other.Photo)
                ) && 
                (
                    this.Notes == other.Notes ||
                    this.Notes != null &&
                    this.Notes.Equals(other.Notes)
                ) && 
                (
                    this.ReportsTo == other.ReportsTo ||
                    this.ReportsTo != null &&
                    this.ReportsTo.Equals(other.ReportsTo)
                ) && 
                (
                    this.PhotoPath == other.PhotoPath ||
                    this.PhotoPath != null &&
                    this.PhotoPath.Equals(other.PhotoPath)
                ) && 
                (
                    this.ReportsToNavigation == other.ReportsToNavigation ||
                    this.ReportsToNavigation != null &&
                    this.ReportsToNavigation.Equals(other.ReportsToNavigation)
                ) && 
                (
                    this.EmployeeTerritories == other.EmployeeTerritories ||
                    this.EmployeeTerritories != null &&
                    this.EmployeeTerritories.SequenceEqual(other.EmployeeTerritories)
                ) && 
                (
                    this.InverseReportsToNavigation == other.InverseReportsToNavigation ||
                    this.InverseReportsToNavigation != null &&
                    this.InverseReportsToNavigation.SequenceEqual(other.InverseReportsToNavigation)
                ) && 
                (
                    this.Orders == other.Orders ||
                    this.Orders != null &&
                    this.Orders.SequenceEqual(other.Orders)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.EmployeeId != null)
                    hash = hash * 59 + this.EmployeeId.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.TitleOfCourtesy != null)
                    hash = hash * 59 + this.TitleOfCourtesy.GetHashCode();
                if (this.BirthDate != null)
                    hash = hash * 59 + this.BirthDate.GetHashCode();
                if (this.HireDate != null)
                    hash = hash * 59 + this.HireDate.GetHashCode();
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.Region != null)
                    hash = hash * 59 + this.Region.GetHashCode();
                if (this.PostalCode != null)
                    hash = hash * 59 + this.PostalCode.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.HomePhone != null)
                    hash = hash * 59 + this.HomePhone.GetHashCode();
                if (this.Extension != null)
                    hash = hash * 59 + this.Extension.GetHashCode();
                if (this.Photo != null)
                    hash = hash * 59 + this.Photo.GetHashCode();
                if (this.Notes != null)
                    hash = hash * 59 + this.Notes.GetHashCode();
                if (this.ReportsTo != null)
                    hash = hash * 59 + this.ReportsTo.GetHashCode();
                if (this.PhotoPath != null)
                    hash = hash * 59 + this.PhotoPath.GetHashCode();
                if (this.ReportsToNavigation != null)
                    hash = hash * 59 + this.ReportsToNavigation.GetHashCode();
                if (this.EmployeeTerritories != null)
                    hash = hash * 59 + this.EmployeeTerritories.GetHashCode();
                if (this.InverseReportsToNavigation != null)
                    hash = hash * 59 + this.InverseReportsToNavigation.GetHashCode();
                if (this.Orders != null)
                    hash = hash * 59 + this.Orders.GetHashCode();
                return hash;
            }
        }
    }

}
