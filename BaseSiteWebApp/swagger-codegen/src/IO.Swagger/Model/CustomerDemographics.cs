/* 
 * Mentoring API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CustomerDemographics
    /// </summary>
    [DataContract]
    public partial class CustomerDemographics :  IEquatable<CustomerDemographics>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerDemographics" /> class.
        /// </summary>
        /// <param name="CustomerTypeId">CustomerTypeId.</param>
        /// <param name="CustomerDesc">CustomerDesc.</param>
        /// <param name="CustomerCustomerDemo">CustomerCustomerDemo.</param>
        public CustomerDemographics(string CustomerTypeId = null, string CustomerDesc = null, List<CustomerCustomerDemo> CustomerCustomerDemo = null)
        {
            this.CustomerTypeId = CustomerTypeId;
            this.CustomerDesc = CustomerDesc;
            this.CustomerCustomerDemo = CustomerCustomerDemo;
        }
        
        /// <summary>
        /// Gets or Sets CustomerTypeId
        /// </summary>
        [DataMember(Name="customerTypeId", EmitDefaultValue=false)]
        public string CustomerTypeId { get; set; }
        /// <summary>
        /// Gets or Sets CustomerDesc
        /// </summary>
        [DataMember(Name="customerDesc", EmitDefaultValue=false)]
        public string CustomerDesc { get; set; }
        /// <summary>
        /// Gets or Sets CustomerCustomerDemo
        /// </summary>
        [DataMember(Name="customerCustomerDemo", EmitDefaultValue=false)]
        public List<CustomerCustomerDemo> CustomerCustomerDemo { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerDemographics {\n");
            sb.Append("  CustomerTypeId: ").Append(CustomerTypeId).Append("\n");
            sb.Append("  CustomerDesc: ").Append(CustomerDesc).Append("\n");
            sb.Append("  CustomerCustomerDemo: ").Append(CustomerCustomerDemo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CustomerDemographics);
        }

        /// <summary>
        /// Returns true if CustomerDemographics instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomerDemographics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerDemographics other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CustomerTypeId == other.CustomerTypeId ||
                    this.CustomerTypeId != null &&
                    this.CustomerTypeId.Equals(other.CustomerTypeId)
                ) && 
                (
                    this.CustomerDesc == other.CustomerDesc ||
                    this.CustomerDesc != null &&
                    this.CustomerDesc.Equals(other.CustomerDesc)
                ) && 
                (
                    this.CustomerCustomerDemo == other.CustomerCustomerDemo ||
                    this.CustomerCustomerDemo != null &&
                    this.CustomerCustomerDemo.SequenceEqual(other.CustomerCustomerDemo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CustomerTypeId != null)
                    hash = hash * 59 + this.CustomerTypeId.GetHashCode();
                if (this.CustomerDesc != null)
                    hash = hash * 59 + this.CustomerDesc.GetHashCode();
                if (this.CustomerCustomerDemo != null)
                    hash = hash * 59 + this.CustomerCustomerDemo.GetHashCode();
                return hash;
            }
        }
    }

}
