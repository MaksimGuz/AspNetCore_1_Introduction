/* 
 * Mentoring API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApiProductsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productName"></param>
        /// <param name="categoryCategoryName"></param>
        /// <param name="productId"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <returns></returns>
        void Create (string productName, string categoryCategoryName, int? productId = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryDescription = null, byte[] categoryPicture = null, List<string> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<string> supplierProducts = null, List<string> orderDetails = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productName"></param>
        /// <param name="categoryCategoryName"></param>
        /// <param name="productId"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateWithHttpInfo (string productName, string categoryCategoryName, int? productId = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryDescription = null, byte[] categoryPicture = null, List<string> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<string> supplierProducts = null, List<string> orderDetails = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void Delete (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productName"></param>
        /// <param name="categoryCategoryName"></param>
        /// <param name="productId"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <returns></returns>
        void Edit (int? id, string productName, string categoryCategoryName, int? productId = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryDescription = null, byte[] categoryPicture = null, List<string> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<string> supplierProducts = null, List<string> orderDetails = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productName"></param>
        /// <param name="categoryCategoryName"></param>
        /// <param name="productId"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditWithHttpInfo (int? id, string productName, string categoryCategoryName, int? productId = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryDescription = null, byte[] categoryPicture = null, List<string> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<string> supplierProducts = null, List<string> orderDetails = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void Get ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void Get_0 (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Get_0WithHttpInfo (int? id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productName"></param>
        /// <param name="categoryCategoryName"></param>
        /// <param name="productId"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateAsync (string productName, string categoryCategoryName, int? productId = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryDescription = null, byte[] categoryPicture = null, List<string> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<string> supplierProducts = null, List<string> orderDetails = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productName"></param>
        /// <param name="categoryCategoryName"></param>
        /// <param name="productId"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateAsyncWithHttpInfo (string productName, string categoryCategoryName, int? productId = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryDescription = null, byte[] categoryPicture = null, List<string> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<string> supplierProducts = null, List<string> orderDetails = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productName"></param>
        /// <param name="categoryCategoryName"></param>
        /// <param name="productId"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditAsync (int? id, string productName, string categoryCategoryName, int? productId = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryDescription = null, byte[] categoryPicture = null, List<string> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<string> supplierProducts = null, List<string> orderDetails = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productName"></param>
        /// <param name="categoryCategoryName"></param>
        /// <param name="productId"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditAsyncWithHttpInfo (int? id, string productName, string categoryCategoryName, int? productId = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryDescription = null, byte[] categoryPicture = null, List<string> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<string> supplierProducts = null, List<string> orderDetails = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Get_0Async (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Get_0AsyncWithHttpInfo (int? id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApiProductsApi : IApiProductsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiProductsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApiProductsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiProductsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApiProductsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productName"></param>
        /// <param name="categoryCategoryName"></param>
        /// <param name="productId"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <returns></returns>
        public void Create (string productName, string categoryCategoryName, int? productId = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryDescription = null, byte[] categoryPicture = null, List<string> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<string> supplierProducts = null, List<string> orderDetails = null)
        {
             CreateWithHttpInfo(productName, categoryCategoryName, productId, supplierId, categoryId, quantityPerUnit, unitPrice, unitsInStock, unitsOnOrder, reorderLevel, discontinued, categoryCategoryId, categoryDescription, categoryPicture, categoryProducts, supplierSupplierId, supplierCompanyName, supplierContactName, supplierContactTitle, supplierAddress, supplierCity, supplierRegion, supplierPostalCode, supplierCountry, supplierPhone, supplierFax, supplierHomePage, supplierProducts, orderDetails);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productName"></param>
        /// <param name="categoryCategoryName"></param>
        /// <param name="productId"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateWithHttpInfo (string productName, string categoryCategoryName, int? productId = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryDescription = null, byte[] categoryPicture = null, List<string> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<string> supplierProducts = null, List<string> orderDetails = null)
        {
            // verify the required parameter 'productName' is set
            if (productName == null)
                throw new ApiException(400, "Missing required parameter 'productName' when calling ApiProductsApi->Create");
            // verify the required parameter 'categoryCategoryName' is set
            if (categoryCategoryName == null)
                throw new ApiException(400, "Missing required parameter 'categoryCategoryName' when calling ApiProductsApi->Create");

            var localVarPath = "/api/ApiProducts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarFormParams.Add("ProductId", Configuration.ApiClient.ParameterToString(productId)); // form parameter
            if (productName != null) localVarFormParams.Add("ProductName", Configuration.ApiClient.ParameterToString(productName)); // form parameter
            if (supplierId != null) localVarFormParams.Add("SupplierId", Configuration.ApiClient.ParameterToString(supplierId)); // form parameter
            if (categoryId != null) localVarFormParams.Add("CategoryId", Configuration.ApiClient.ParameterToString(categoryId)); // form parameter
            if (quantityPerUnit != null) localVarFormParams.Add("QuantityPerUnit", Configuration.ApiClient.ParameterToString(quantityPerUnit)); // form parameter
            if (unitPrice != null) localVarFormParams.Add("UnitPrice", Configuration.ApiClient.ParameterToString(unitPrice)); // form parameter
            if (unitsInStock != null) localVarFormParams.Add("UnitsInStock", Configuration.ApiClient.ParameterToString(unitsInStock)); // form parameter
            if (unitsOnOrder != null) localVarFormParams.Add("UnitsOnOrder", Configuration.ApiClient.ParameterToString(unitsOnOrder)); // form parameter
            if (reorderLevel != null) localVarFormParams.Add("ReorderLevel", Configuration.ApiClient.ParameterToString(reorderLevel)); // form parameter
            if (discontinued != null) localVarFormParams.Add("Discontinued", Configuration.ApiClient.ParameterToString(discontinued)); // form parameter
            if (categoryCategoryId != null) localVarFormParams.Add("Category.CategoryId", Configuration.ApiClient.ParameterToString(categoryCategoryId)); // form parameter
            if (categoryCategoryName != null) localVarFormParams.Add("Category.CategoryName", Configuration.ApiClient.ParameterToString(categoryCategoryName)); // form parameter
            if (categoryDescription != null) localVarFormParams.Add("Category.Description", Configuration.ApiClient.ParameterToString(categoryDescription)); // form parameter
            if (categoryPicture != null) localVarFormParams.Add("Category.Picture", Configuration.ApiClient.ParameterToString(categoryPicture)); // form parameter
            if (categoryProducts != null) localVarFormParams.Add("Category.Products", Configuration.ApiClient.ParameterToString(categoryProducts)); // form parameter
            if (supplierSupplierId != null) localVarFormParams.Add("Supplier.SupplierId", Configuration.ApiClient.ParameterToString(supplierSupplierId)); // form parameter
            if (supplierCompanyName != null) localVarFormParams.Add("Supplier.CompanyName", Configuration.ApiClient.ParameterToString(supplierCompanyName)); // form parameter
            if (supplierContactName != null) localVarFormParams.Add("Supplier.ContactName", Configuration.ApiClient.ParameterToString(supplierContactName)); // form parameter
            if (supplierContactTitle != null) localVarFormParams.Add("Supplier.ContactTitle", Configuration.ApiClient.ParameterToString(supplierContactTitle)); // form parameter
            if (supplierAddress != null) localVarFormParams.Add("Supplier.Address", Configuration.ApiClient.ParameterToString(supplierAddress)); // form parameter
            if (supplierCity != null) localVarFormParams.Add("Supplier.City", Configuration.ApiClient.ParameterToString(supplierCity)); // form parameter
            if (supplierRegion != null) localVarFormParams.Add("Supplier.Region", Configuration.ApiClient.ParameterToString(supplierRegion)); // form parameter
            if (supplierPostalCode != null) localVarFormParams.Add("Supplier.PostalCode", Configuration.ApiClient.ParameterToString(supplierPostalCode)); // form parameter
            if (supplierCountry != null) localVarFormParams.Add("Supplier.Country", Configuration.ApiClient.ParameterToString(supplierCountry)); // form parameter
            if (supplierPhone != null) localVarFormParams.Add("Supplier.Phone", Configuration.ApiClient.ParameterToString(supplierPhone)); // form parameter
            if (supplierFax != null) localVarFormParams.Add("Supplier.Fax", Configuration.ApiClient.ParameterToString(supplierFax)); // form parameter
            if (supplierHomePage != null) localVarFormParams.Add("Supplier.HomePage", Configuration.ApiClient.ParameterToString(supplierHomePage)); // form parameter
            if (supplierProducts != null) localVarFormParams.Add("Supplier.Products", Configuration.ApiClient.ParameterToString(supplierProducts)); // form parameter
            if (orderDetails != null) localVarFormParams.Add("OrderDetails", Configuration.ApiClient.ParameterToString(orderDetails)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productName"></param>
        /// <param name="categoryCategoryName"></param>
        /// <param name="productId"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateAsync (string productName, string categoryCategoryName, int? productId = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryDescription = null, byte[] categoryPicture = null, List<string> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<string> supplierProducts = null, List<string> orderDetails = null)
        {
             await CreateAsyncWithHttpInfo(productName, categoryCategoryName, productId, supplierId, categoryId, quantityPerUnit, unitPrice, unitsInStock, unitsOnOrder, reorderLevel, discontinued, categoryCategoryId, categoryDescription, categoryPicture, categoryProducts, supplierSupplierId, supplierCompanyName, supplierContactName, supplierContactTitle, supplierAddress, supplierCity, supplierRegion, supplierPostalCode, supplierCountry, supplierPhone, supplierFax, supplierHomePage, supplierProducts, orderDetails);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productName"></param>
        /// <param name="categoryCategoryName"></param>
        /// <param name="productId"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateAsyncWithHttpInfo (string productName, string categoryCategoryName, int? productId = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryDescription = null, byte[] categoryPicture = null, List<string> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<string> supplierProducts = null, List<string> orderDetails = null)
        {
            // verify the required parameter 'productName' is set
            if (productName == null)
                throw new ApiException(400, "Missing required parameter 'productName' when calling ApiProductsApi->Create");
            // verify the required parameter 'categoryCategoryName' is set
            if (categoryCategoryName == null)
                throw new ApiException(400, "Missing required parameter 'categoryCategoryName' when calling ApiProductsApi->Create");

            var localVarPath = "/api/ApiProducts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarFormParams.Add("ProductId", Configuration.ApiClient.ParameterToString(productId)); // form parameter
            if (productName != null) localVarFormParams.Add("ProductName", Configuration.ApiClient.ParameterToString(productName)); // form parameter
            if (supplierId != null) localVarFormParams.Add("SupplierId", Configuration.ApiClient.ParameterToString(supplierId)); // form parameter
            if (categoryId != null) localVarFormParams.Add("CategoryId", Configuration.ApiClient.ParameterToString(categoryId)); // form parameter
            if (quantityPerUnit != null) localVarFormParams.Add("QuantityPerUnit", Configuration.ApiClient.ParameterToString(quantityPerUnit)); // form parameter
            if (unitPrice != null) localVarFormParams.Add("UnitPrice", Configuration.ApiClient.ParameterToString(unitPrice)); // form parameter
            if (unitsInStock != null) localVarFormParams.Add("UnitsInStock", Configuration.ApiClient.ParameterToString(unitsInStock)); // form parameter
            if (unitsOnOrder != null) localVarFormParams.Add("UnitsOnOrder", Configuration.ApiClient.ParameterToString(unitsOnOrder)); // form parameter
            if (reorderLevel != null) localVarFormParams.Add("ReorderLevel", Configuration.ApiClient.ParameterToString(reorderLevel)); // form parameter
            if (discontinued != null) localVarFormParams.Add("Discontinued", Configuration.ApiClient.ParameterToString(discontinued)); // form parameter
            if (categoryCategoryId != null) localVarFormParams.Add("Category.CategoryId", Configuration.ApiClient.ParameterToString(categoryCategoryId)); // form parameter
            if (categoryCategoryName != null) localVarFormParams.Add("Category.CategoryName", Configuration.ApiClient.ParameterToString(categoryCategoryName)); // form parameter
            if (categoryDescription != null) localVarFormParams.Add("Category.Description", Configuration.ApiClient.ParameterToString(categoryDescription)); // form parameter
            if (categoryPicture != null) localVarFormParams.Add("Category.Picture", Configuration.ApiClient.ParameterToString(categoryPicture)); // form parameter
            if (categoryProducts != null) localVarFormParams.Add("Category.Products", Configuration.ApiClient.ParameterToString(categoryProducts)); // form parameter
            if (supplierSupplierId != null) localVarFormParams.Add("Supplier.SupplierId", Configuration.ApiClient.ParameterToString(supplierSupplierId)); // form parameter
            if (supplierCompanyName != null) localVarFormParams.Add("Supplier.CompanyName", Configuration.ApiClient.ParameterToString(supplierCompanyName)); // form parameter
            if (supplierContactName != null) localVarFormParams.Add("Supplier.ContactName", Configuration.ApiClient.ParameterToString(supplierContactName)); // form parameter
            if (supplierContactTitle != null) localVarFormParams.Add("Supplier.ContactTitle", Configuration.ApiClient.ParameterToString(supplierContactTitle)); // form parameter
            if (supplierAddress != null) localVarFormParams.Add("Supplier.Address", Configuration.ApiClient.ParameterToString(supplierAddress)); // form parameter
            if (supplierCity != null) localVarFormParams.Add("Supplier.City", Configuration.ApiClient.ParameterToString(supplierCity)); // form parameter
            if (supplierRegion != null) localVarFormParams.Add("Supplier.Region", Configuration.ApiClient.ParameterToString(supplierRegion)); // form parameter
            if (supplierPostalCode != null) localVarFormParams.Add("Supplier.PostalCode", Configuration.ApiClient.ParameterToString(supplierPostalCode)); // form parameter
            if (supplierCountry != null) localVarFormParams.Add("Supplier.Country", Configuration.ApiClient.ParameterToString(supplierCountry)); // form parameter
            if (supplierPhone != null) localVarFormParams.Add("Supplier.Phone", Configuration.ApiClient.ParameterToString(supplierPhone)); // form parameter
            if (supplierFax != null) localVarFormParams.Add("Supplier.Fax", Configuration.ApiClient.ParameterToString(supplierFax)); // form parameter
            if (supplierHomePage != null) localVarFormParams.Add("Supplier.HomePage", Configuration.ApiClient.ParameterToString(supplierHomePage)); // form parameter
            if (supplierProducts != null) localVarFormParams.Add("Supplier.Products", Configuration.ApiClient.ParameterToString(supplierProducts)); // form parameter
            if (orderDetails != null) localVarFormParams.Add("OrderDetails", Configuration.ApiClient.ParameterToString(orderDetails)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void Delete (int? id)
        {
             DeleteWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ApiProductsApi->Delete");

            var localVarPath = "/api/ApiProducts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync (int? id)
        {
             await DeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ApiProductsApi->Delete");

            var localVarPath = "/api/ApiProducts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productName"></param>
        /// <param name="categoryCategoryName"></param>
        /// <param name="productId"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <returns></returns>
        public void Edit (int? id, string productName, string categoryCategoryName, int? productId = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryDescription = null, byte[] categoryPicture = null, List<string> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<string> supplierProducts = null, List<string> orderDetails = null)
        {
             EditWithHttpInfo(id, productName, categoryCategoryName, productId, supplierId, categoryId, quantityPerUnit, unitPrice, unitsInStock, unitsOnOrder, reorderLevel, discontinued, categoryCategoryId, categoryDescription, categoryPicture, categoryProducts, supplierSupplierId, supplierCompanyName, supplierContactName, supplierContactTitle, supplierAddress, supplierCity, supplierRegion, supplierPostalCode, supplierCountry, supplierPhone, supplierFax, supplierHomePage, supplierProducts, orderDetails);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productName"></param>
        /// <param name="categoryCategoryName"></param>
        /// <param name="productId"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EditWithHttpInfo (int? id, string productName, string categoryCategoryName, int? productId = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryDescription = null, byte[] categoryPicture = null, List<string> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<string> supplierProducts = null, List<string> orderDetails = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ApiProductsApi->Edit");
            // verify the required parameter 'productName' is set
            if (productName == null)
                throw new ApiException(400, "Missing required parameter 'productName' when calling ApiProductsApi->Edit");
            // verify the required parameter 'categoryCategoryName' is set
            if (categoryCategoryName == null)
                throw new ApiException(400, "Missing required parameter 'categoryCategoryName' when calling ApiProductsApi->Edit");

            var localVarPath = "/api/ApiProducts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (productId != null) localVarFormParams.Add("ProductId", Configuration.ApiClient.ParameterToString(productId)); // form parameter
            if (productName != null) localVarFormParams.Add("ProductName", Configuration.ApiClient.ParameterToString(productName)); // form parameter
            if (supplierId != null) localVarFormParams.Add("SupplierId", Configuration.ApiClient.ParameterToString(supplierId)); // form parameter
            if (categoryId != null) localVarFormParams.Add("CategoryId", Configuration.ApiClient.ParameterToString(categoryId)); // form parameter
            if (quantityPerUnit != null) localVarFormParams.Add("QuantityPerUnit", Configuration.ApiClient.ParameterToString(quantityPerUnit)); // form parameter
            if (unitPrice != null) localVarFormParams.Add("UnitPrice", Configuration.ApiClient.ParameterToString(unitPrice)); // form parameter
            if (unitsInStock != null) localVarFormParams.Add("UnitsInStock", Configuration.ApiClient.ParameterToString(unitsInStock)); // form parameter
            if (unitsOnOrder != null) localVarFormParams.Add("UnitsOnOrder", Configuration.ApiClient.ParameterToString(unitsOnOrder)); // form parameter
            if (reorderLevel != null) localVarFormParams.Add("ReorderLevel", Configuration.ApiClient.ParameterToString(reorderLevel)); // form parameter
            if (discontinued != null) localVarFormParams.Add("Discontinued", Configuration.ApiClient.ParameterToString(discontinued)); // form parameter
            if (categoryCategoryId != null) localVarFormParams.Add("Category.CategoryId", Configuration.ApiClient.ParameterToString(categoryCategoryId)); // form parameter
            if (categoryCategoryName != null) localVarFormParams.Add("Category.CategoryName", Configuration.ApiClient.ParameterToString(categoryCategoryName)); // form parameter
            if (categoryDescription != null) localVarFormParams.Add("Category.Description", Configuration.ApiClient.ParameterToString(categoryDescription)); // form parameter
            if (categoryPicture != null) localVarFormParams.Add("Category.Picture", Configuration.ApiClient.ParameterToString(categoryPicture)); // form parameter
            if (categoryProducts != null) localVarFormParams.Add("Category.Products", Configuration.ApiClient.ParameterToString(categoryProducts)); // form parameter
            if (supplierSupplierId != null) localVarFormParams.Add("Supplier.SupplierId", Configuration.ApiClient.ParameterToString(supplierSupplierId)); // form parameter
            if (supplierCompanyName != null) localVarFormParams.Add("Supplier.CompanyName", Configuration.ApiClient.ParameterToString(supplierCompanyName)); // form parameter
            if (supplierContactName != null) localVarFormParams.Add("Supplier.ContactName", Configuration.ApiClient.ParameterToString(supplierContactName)); // form parameter
            if (supplierContactTitle != null) localVarFormParams.Add("Supplier.ContactTitle", Configuration.ApiClient.ParameterToString(supplierContactTitle)); // form parameter
            if (supplierAddress != null) localVarFormParams.Add("Supplier.Address", Configuration.ApiClient.ParameterToString(supplierAddress)); // form parameter
            if (supplierCity != null) localVarFormParams.Add("Supplier.City", Configuration.ApiClient.ParameterToString(supplierCity)); // form parameter
            if (supplierRegion != null) localVarFormParams.Add("Supplier.Region", Configuration.ApiClient.ParameterToString(supplierRegion)); // form parameter
            if (supplierPostalCode != null) localVarFormParams.Add("Supplier.PostalCode", Configuration.ApiClient.ParameterToString(supplierPostalCode)); // form parameter
            if (supplierCountry != null) localVarFormParams.Add("Supplier.Country", Configuration.ApiClient.ParameterToString(supplierCountry)); // form parameter
            if (supplierPhone != null) localVarFormParams.Add("Supplier.Phone", Configuration.ApiClient.ParameterToString(supplierPhone)); // form parameter
            if (supplierFax != null) localVarFormParams.Add("Supplier.Fax", Configuration.ApiClient.ParameterToString(supplierFax)); // form parameter
            if (supplierHomePage != null) localVarFormParams.Add("Supplier.HomePage", Configuration.ApiClient.ParameterToString(supplierHomePage)); // form parameter
            if (supplierProducts != null) localVarFormParams.Add("Supplier.Products", Configuration.ApiClient.ParameterToString(supplierProducts)); // form parameter
            if (orderDetails != null) localVarFormParams.Add("OrderDetails", Configuration.ApiClient.ParameterToString(orderDetails)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Edit", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productName"></param>
        /// <param name="categoryCategoryName"></param>
        /// <param name="productId"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditAsync (int? id, string productName, string categoryCategoryName, int? productId = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryDescription = null, byte[] categoryPicture = null, List<string> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<string> supplierProducts = null, List<string> orderDetails = null)
        {
             await EditAsyncWithHttpInfo(id, productName, categoryCategoryName, productId, supplierId, categoryId, quantityPerUnit, unitPrice, unitsInStock, unitsOnOrder, reorderLevel, discontinued, categoryCategoryId, categoryDescription, categoryPicture, categoryProducts, supplierSupplierId, supplierCompanyName, supplierContactName, supplierContactTitle, supplierAddress, supplierCity, supplierRegion, supplierPostalCode, supplierCountry, supplierPhone, supplierFax, supplierHomePage, supplierProducts, orderDetails);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productName"></param>
        /// <param name="categoryCategoryName"></param>
        /// <param name="productId"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EditAsyncWithHttpInfo (int? id, string productName, string categoryCategoryName, int? productId = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryDescription = null, byte[] categoryPicture = null, List<string> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<string> supplierProducts = null, List<string> orderDetails = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ApiProductsApi->Edit");
            // verify the required parameter 'productName' is set
            if (productName == null)
                throw new ApiException(400, "Missing required parameter 'productName' when calling ApiProductsApi->Edit");
            // verify the required parameter 'categoryCategoryName' is set
            if (categoryCategoryName == null)
                throw new ApiException(400, "Missing required parameter 'categoryCategoryName' when calling ApiProductsApi->Edit");

            var localVarPath = "/api/ApiProducts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (productId != null) localVarFormParams.Add("ProductId", Configuration.ApiClient.ParameterToString(productId)); // form parameter
            if (productName != null) localVarFormParams.Add("ProductName", Configuration.ApiClient.ParameterToString(productName)); // form parameter
            if (supplierId != null) localVarFormParams.Add("SupplierId", Configuration.ApiClient.ParameterToString(supplierId)); // form parameter
            if (categoryId != null) localVarFormParams.Add("CategoryId", Configuration.ApiClient.ParameterToString(categoryId)); // form parameter
            if (quantityPerUnit != null) localVarFormParams.Add("QuantityPerUnit", Configuration.ApiClient.ParameterToString(quantityPerUnit)); // form parameter
            if (unitPrice != null) localVarFormParams.Add("UnitPrice", Configuration.ApiClient.ParameterToString(unitPrice)); // form parameter
            if (unitsInStock != null) localVarFormParams.Add("UnitsInStock", Configuration.ApiClient.ParameterToString(unitsInStock)); // form parameter
            if (unitsOnOrder != null) localVarFormParams.Add("UnitsOnOrder", Configuration.ApiClient.ParameterToString(unitsOnOrder)); // form parameter
            if (reorderLevel != null) localVarFormParams.Add("ReorderLevel", Configuration.ApiClient.ParameterToString(reorderLevel)); // form parameter
            if (discontinued != null) localVarFormParams.Add("Discontinued", Configuration.ApiClient.ParameterToString(discontinued)); // form parameter
            if (categoryCategoryId != null) localVarFormParams.Add("Category.CategoryId", Configuration.ApiClient.ParameterToString(categoryCategoryId)); // form parameter
            if (categoryCategoryName != null) localVarFormParams.Add("Category.CategoryName", Configuration.ApiClient.ParameterToString(categoryCategoryName)); // form parameter
            if (categoryDescription != null) localVarFormParams.Add("Category.Description", Configuration.ApiClient.ParameterToString(categoryDescription)); // form parameter
            if (categoryPicture != null) localVarFormParams.Add("Category.Picture", Configuration.ApiClient.ParameterToString(categoryPicture)); // form parameter
            if (categoryProducts != null) localVarFormParams.Add("Category.Products", Configuration.ApiClient.ParameterToString(categoryProducts)); // form parameter
            if (supplierSupplierId != null) localVarFormParams.Add("Supplier.SupplierId", Configuration.ApiClient.ParameterToString(supplierSupplierId)); // form parameter
            if (supplierCompanyName != null) localVarFormParams.Add("Supplier.CompanyName", Configuration.ApiClient.ParameterToString(supplierCompanyName)); // form parameter
            if (supplierContactName != null) localVarFormParams.Add("Supplier.ContactName", Configuration.ApiClient.ParameterToString(supplierContactName)); // form parameter
            if (supplierContactTitle != null) localVarFormParams.Add("Supplier.ContactTitle", Configuration.ApiClient.ParameterToString(supplierContactTitle)); // form parameter
            if (supplierAddress != null) localVarFormParams.Add("Supplier.Address", Configuration.ApiClient.ParameterToString(supplierAddress)); // form parameter
            if (supplierCity != null) localVarFormParams.Add("Supplier.City", Configuration.ApiClient.ParameterToString(supplierCity)); // form parameter
            if (supplierRegion != null) localVarFormParams.Add("Supplier.Region", Configuration.ApiClient.ParameterToString(supplierRegion)); // form parameter
            if (supplierPostalCode != null) localVarFormParams.Add("Supplier.PostalCode", Configuration.ApiClient.ParameterToString(supplierPostalCode)); // form parameter
            if (supplierCountry != null) localVarFormParams.Add("Supplier.Country", Configuration.ApiClient.ParameterToString(supplierCountry)); // form parameter
            if (supplierPhone != null) localVarFormParams.Add("Supplier.Phone", Configuration.ApiClient.ParameterToString(supplierPhone)); // form parameter
            if (supplierFax != null) localVarFormParams.Add("Supplier.Fax", Configuration.ApiClient.ParameterToString(supplierFax)); // form parameter
            if (supplierHomePage != null) localVarFormParams.Add("Supplier.HomePage", Configuration.ApiClient.ParameterToString(supplierHomePage)); // form parameter
            if (supplierProducts != null) localVarFormParams.Add("Supplier.Products", Configuration.ApiClient.ParameterToString(supplierProducts)); // form parameter
            if (orderDetails != null) localVarFormParams.Add("OrderDetails", Configuration.ApiClient.ParameterToString(orderDetails)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Edit", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void Get ()
        {
             GetWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetWithHttpInfo ()
        {

            var localVarPath = "/api/ApiProducts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAsync ()
        {
             await GetAsyncWithHttpInfo();

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/ApiProducts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void Get_0 (int? id)
        {
             Get_0WithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Get_0WithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ApiProductsApi->Get_0");

            var localVarPath = "/api/ApiProducts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get_0", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Get_0Async (int? id)
        {
             await Get_0AsyncWithHttpInfo(id);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Get_0AsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ApiProductsApi->Get_0");

            var localVarPath = "/api/ApiProducts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get_0", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
