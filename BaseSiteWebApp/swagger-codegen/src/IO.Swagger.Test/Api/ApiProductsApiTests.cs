/* 
 * Mentoring API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ApiProductsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ApiProductsApiTests
    {
        private ApiProductsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ApiProductsApi("https://localhost:44354");
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ApiProductsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ApiProductsApi
            //Assert.IsInstanceOfType(typeof(ApiProductsApi), instance, "instance is a ApiProductsApi");
        }

        
        /// <summary>
        /// Test Create
        /// </summary>
        [Test]
        public void CreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productName = null;
            //string categoryCategoryName = null;
            //int? productId = null;
            //int? supplierId = null;
            //int? categoryId = null;
            //string quantityPerUnit = null;
            //double? unitPrice = null;
            //int? unitsInStock = null;
            //int? unitsOnOrder = null;
            //int? reorderLevel = null;
            //bool? discontinued = null;
            //int? categoryCategoryId = null;
            //string categoryDescription = null;
            //byte[] categoryPicture = null;
            //List<string> categoryProducts = null;
            //int? supplierSupplierId = null;
            //string supplierCompanyName = null;
            //string supplierContactName = null;
            //string supplierContactTitle = null;
            //string supplierAddress = null;
            //string supplierCity = null;
            //string supplierRegion = null;
            //string supplierPostalCode = null;
            //string supplierCountry = null;
            //string supplierPhone = null;
            //string supplierFax = null;
            //string supplierHomePage = null;
            //List<string> supplierProducts = null;
            //List<string> orderDetails = null;
            //instance.Create(productName, categoryCategoryName, productId, supplierId, categoryId, quantityPerUnit, unitPrice, unitsInStock, unitsOnOrder, reorderLevel, discontinued, categoryCategoryId, categoryDescription, categoryPicture, categoryProducts, supplierSupplierId, supplierCompanyName, supplierContactName, supplierContactTitle, supplierAddress, supplierCity, supplierRegion, supplierPostalCode, supplierCountry, supplierPhone, supplierFax, supplierHomePage, supplierProducts, orderDetails);
            
        }
        
        /// <summary>
        /// Test Delete
        /// </summary>
        [Test]
        public void DeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.Delete(id);
            
        }
        
        /// <summary>
        /// Test Edit
        /// </summary>
        [Test]
        public void EditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string productName = null;
            //string categoryCategoryName = null;
            //int? productId = null;
            //int? supplierId = null;
            //int? categoryId = null;
            //string quantityPerUnit = null;
            //double? unitPrice = null;
            //int? unitsInStock = null;
            //int? unitsOnOrder = null;
            //int? reorderLevel = null;
            //bool? discontinued = null;
            //int? categoryCategoryId = null;
            //string categoryDescription = null;
            //byte[] categoryPicture = null;
            //List<string> categoryProducts = null;
            //int? supplierSupplierId = null;
            //string supplierCompanyName = null;
            //string supplierContactName = null;
            //string supplierContactTitle = null;
            //string supplierAddress = null;
            //string supplierCity = null;
            //string supplierRegion = null;
            //string supplierPostalCode = null;
            //string supplierCountry = null;
            //string supplierPhone = null;
            //string supplierFax = null;
            //string supplierHomePage = null;
            //List<string> supplierProducts = null;
            //List<string> orderDetails = null;
            //instance.Edit(id, productName, categoryCategoryName, productId, supplierId, categoryId, quantityPerUnit, unitPrice, unitsInStock, unitsOnOrder, reorderLevel, discontinued, categoryCategoryId, categoryDescription, categoryPicture, categoryProducts, supplierSupplierId, supplierCompanyName, supplierContactName, supplierContactTitle, supplierAddress, supplierCity, supplierRegion, supplierPostalCode, supplierCountry, supplierPhone, supplierFax, supplierHomePage, supplierProducts, orderDetails);
            
        }
        
        /// <summary>
        /// Test Get
        /// </summary>
        [Test]
        public void GetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            instance.Get();
            
        }
        
        /// <summary>
        /// Test Get_0
        /// </summary>
        [Test]
        public void Get_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int? id = 1;
            instance.Get_0(id);            
        }
        
    }

}
